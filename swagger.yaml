openapi: 3.0.0

paths:
# ED-01 : ELECTION OFFICIALS ------------------------------------------------------------------------

  /booths/{booth_id}/registerResult:
    put:
      summary: This endpoint verify official booth 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                booth:
                  type: string
                city:
                  type: string
                missing:
                  type: string
                link:
                  type: string
                vote:
                  type: string
                yes:
                  type: string
                no:
                  type: string
      parameters:
        - name: booth_id
          in: path
          required: true
          description: Person unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:officialbooth/invocations"
        httpMethod: "POST"
# ED-02 : PARTICIPANTS ------------------------------------------------------------------------------

  /persons/{person_id}/register:
    put:
      summary: This endpoint register participants on the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: string
                name:
                  type: string
                lastname:
                  type: string
                booth:
                  type: string
                school:
                  type: string
                city:
                  type: string
                vote:
                  type: string
                
      parameters:
        - name: person_id
          in: path
          required: true
          description: Person unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:registerparticipant/invocations"
        httpMethod: "POST"
# ED-03 : ELECTION RESULTS --------------------------------------------------------------------------

# ED-04 : INVALIDATIONS -----------------------------------------------------------------------------
  /booths/{booth_id}/invalidate:
    put:
      summary: This endpoint saves an invalid booth into de database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city_id:
                  type: string
                school_id:
                  type: string
      parameters:
        - name: booth_id
          in: path
          required: true
          description: Booth unique Id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:invalidateBooth/invocations"
        httpMethod: "POST"
        
  /invalids:
    get:
      summary: This endpoint returns all the invalid booths across the country
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:showInvalidBooths/invocations"
        httpMethod: "POST"
        
  /invalids/cities:
    get:
      summary: This endpoint returns all the invalid booths across the country by city
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:showInvalidBoothsByCity/invocations"
        httpMethod: "POST"
        
  /invalids/cities/{city_id}/schools:
    get:
      summary: This endpoint returns all the invalid booths by school across a given city
      parameters:
        - name: city_id
          in: path
          required: true
          description: City unique Id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:showInvalidBoothsBySchool/invocations"
        httpMethod: "POST"